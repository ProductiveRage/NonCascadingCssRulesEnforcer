<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSSParser</name>
    </assembly>
    <members>
        <member name="M:CSSParser.StringNavigators.IWalkThroughStrings.DoesCurrentContentMatch(System.String,System.Collections.Generic.IEqualityComparer{System.Char})">
            <summary>
            This will return true if the content is at least as long as the specified value string and if the next n characters (where n is the length of
            the value string) correspond to each of the value string's characters. This testing will be done according to the optionalComparer if non-null
            and will apply a simple char comparison (precise) match if a null optionalComparer is specified. An exception will be raised for a null or
            blank value. If there is insufficient content available to match the length of the value argument then false will be returned.
            </summary>
        </member>
        <member name="P:CSSParser.StringNavigators.IWalkThroughStrings.CurrentCharacter">
            <summary>
            This return null if the current location in the string has no content (eg. anywhere on an empty string or past the end of a non-empty string)
            </summary>
        </member>
        <member name="P:CSSParser.StringNavigators.IWalkThroughStrings.Next">
            <summary>
            This will never return null
            </summary>
        </member>
        <member name="M:CSSParser.StringNavigators.StringNavigator.DoesCurrentContentMatch(System.String,System.Collections.Generic.IEqualityComparer{System.Char})">
            <summary>
            This will return true if the content is at least as long as the specified value string and if the next n characters (where n is the length of
            the value string) correspond to each of the value string's characters. This testing will be done according to the optionalComparer if non-null
            and will apply a simple char comparison (precise) match if a null optionalComparer is specified. An exception will be raised for a null or
            blank value. If there is insufficient content available to match the length of the value argument then false will be returned.
            </summary>
        </member>
        <member name="P:CSSParser.StringNavigators.StringNavigator.CurrentCharacter">
            <summary>
            This return null if the current location in the string has no content (eg. anywhere on an empty string or past the end of a non-empty string)
            </summary>
        </member>
        <member name="P:CSSParser.StringNavigators.StringNavigator.Next">
            <summary>
            This return null if the current location in the string has no content (eg. anywhere on an empty string or past the end of a non-empty string)
            </summary>
        </member>
        <member name="M:CSSParser.ContentProcessors.CharacterProcessors.Factories.IGenerateCharacterProcessors.Get``1(System.Object[])">
            <summary>
            This will never return null, it will throw an exception if unable to satisfy the request
            </summary>
        </member>
        <member name="T:CSSParser.TextReaderNavigators.WeakEventSource`1">
            <summary>
            This class enables the specification of "weak events" (meaning that there is no direct reference to the listener from the event publisher) so
            long as the event publisher can be written to make use of this (no change to listeners will then be required)
            </summary>
        </member>
        <member name="M:CSSParser.TextReaderNavigators.WeakEventSource`1.IMakeEventCallbacks.ExecuteCallbackIfTargetStillAlive(System.Object,`0)">
            <summary>
            This will execute the callback unless its target was a WeakReference whose target has been collected, in which case it will return
            false. It will return true if the callback was exected.
            </summary>
        </member>
        <member name="M:CSSParser.TextReaderNavigators.WeakEventSource`1.IMakeEventCallbacks.CorrespondsTo(System.EventHandler{`0})">
            <summary>
            This indicates whether its callback corresponds to the specified event handler to enable the unhooking of event registrations
            </summary>
        </member>
        <member name="P:CSSParser.TextReaderNavigators.WeakEventSource`1.IMakeEventCallbacks.IsTargetStillAlive">
            <summary>
            If false then the target was a WeakReference whose target has been collected. If true then either the reference is still active or a
            static callback was specified (which has no target instance). This should be used to remove expired entries from a callback list, not
            called before ExecuteCallbackIfTargetStillAlive since the target may be collected between testing this and calling that method.
            </summary>
        </member>
        <member name="M:CSSParser.ContentProcessors.CharacterProcessors.SelectorOrStyleSegment.IsNextWordOneOfThePseudoClasses(CSSParser.StringNavigators.IWalkThroughStrings)">
            <summary>
            This will try to determine whether the next word from the given point in the string navigator is a recognised pseudo class. Any whitespace at
            the current position will be moved over and the content, if any, taken from there.
            </summary>
        </member>
        <member name="F:CSSParser.ContentProcessors.CharacterProcessors.SelectorOrStyleSegment.PseudoClasses">
            <summary>
            These are ordered by length as a very minor optimisation, it may allow matches to occur more quickly since less characters may have to be tested
            (to be honest, it would probably make more sense to arrange them in order of likelihood that they will appear and the most expensive case is when
            none of them are present and no ordering will help with that)
            </summary>
        </member>
        <member name="P:CSSParser.ContentProcessors.CharacterProcessors.SelectorOrStyleSegment.CharacterCategorisationBehaviourOverride.CharacterProcessorToReturnTo">
            <summary>
            This will never be null
            </summary>
        </member>
        <member name="F:CSSParser.ContentProcessors.CharacterCategorisationOptions.StylePropertyColon">
            <summary>
            This is the colon between a Style Property and Value (not any colons that may exist in a media query, for example)
            </summary>
        </member>
        <member name="P:CSSParser.ContentProcessors.StringProcessors.CategorisedCharacterString.Value">
            <summary>
            This will never be null or an empty string
            </summary>
        </member>
        <member name="P:CSSParser.ContentProcessors.StringProcessors.CategorisedCharacterString.IndexInSource">
            <summary>
            This is the location of the start of the string in the source data
            </summary>
        </member>
        <member name="T:CSSParser.ContentProcessors.CharacterProcessors.QuotedSegment">
            <summary>
            This may be a quoted section of a property value or of an attribute selector (this will be determined by the characterCategorisation
            passed to the constructor)
            </summary>
        </member>
        <member name="M:CSSParser.TextReaderNavigators.TextReaderStringNavigator.#ctor(CSSParser.TextReaderNavigators.TextReaderStringNavigator.TextReaderWithReadAheadEvent,System.Int32,System.Collections.Generic.List{System.Char})">
            <summary>
            All instances returned from requests to the Next property will share the same TextReaderWithReadAheadEvent instance and use this as the
            synchronisation object when any operations that must be thread safe will occur. This includes any calls to Read since it must be guaranteed
            that each Read call can transmit the read character(s) to any TextReaderStringNavigator instances that are lagging behind to ensure that
            their catchUpQueue is complete. A lock must also be obtained any time that a new TextReaderStringNavigator is created that shares the
            TextReaderWithReadAheadEvent instance since its constructor will register with the ReadAhead event and mustn't miss any data from Read requests
            that may occur during the class' instantiation. By extension a lock must be obtained any time that the catchUpQueue is accessed (either to
            retrieve data or to change the contents) since its contents may be changed where the ReadAhead subscription is processed which may be
            across multiple threads. The catchUpQueue's purpose is to allow instances of TextReaderStringNavigator that lag behind the wrapped
            TextReaderWithReadAheadEvent to return CurrentCharacter data without having to query the TextReaderWithReadAheadEvent (which won't be able
            to help since it has progressed past the TextReaderStringNavigator's position). This mechanism can't prevent the source TextReader from being
            progressed by another object with a reference to the TextReader but it does guarantee that all of the TextReaderStringNavigator instances will
            have data consistent with the other TextReaderStringNavigator instances at all times. The TextReaderWithReadAheadEvent being private is an
            extra layer of insurance that its Read method will not be called without the proper locks in place and should help ensure that a reference
            to TextReaderWithReadAheadEvents can not be leaked out which could risk deadlocks as they are used as the synchronisation object.
            </summary>
        </member>
        <member name="M:CSSParser.TextReaderNavigators.TextReaderStringNavigator.DoesCurrentContentMatch(System.String,System.Collections.Generic.IEqualityComparer{System.Char})">
            <summary>
            This will return true if the content is at least as long as the specified value string and if the next n characters (where n is the length of
            the value string) correspond to each of the value string's characters. This testing will be done according to the optionalComparer if non-null
            and will apply a simple char comparison (precise) match if a null optionalComparer is specified. An exception will be raised for a null or
            blank value. If there is insufficient content available to match the length of the value argument then false will be returned.
            </summary>
        </member>
        <member name="P:CSSParser.TextReaderNavigators.TextReaderStringNavigator.CurrentCharacter">
            <summary>
            This return null if the current location in the string has no content (eg. anywhere on an empty string or past the end of a non-empty string)
            </summary>
        </member>
        <member name="P:CSSParser.TextReaderNavigators.TextReaderStringNavigator.Next">
            <summary>
            This will never return null
            </summary>
        </member>
        <member name="P:CSSParser.TextReaderNavigators.TextReaderStringNavigator.TextReaderWithReadAheadEvent.ReadAheadEventArgs.FromPosition">
            <summary>
            This will always be zero or greater
            </summary>
        </member>
        <member name="T:CSSParser.Parser">
            <summary>
            The parsing performed by these methods is intended to be as cheap as possible but in exchange it performs only simplistic parsing of the
            content (it doesn't differentiate between selectors - eg. "div.Header h2.Name, div.Footer" and style property names - eg. "color" - for
            example). The quality of the data may be improved by passing the returned CategorisedCharacterString set through the
            LessCssHierarchicalParser, this WILL differentiate between selectors and style property names and will represent nested styles (for
            LESS CSS content) and styles nested within media queries. It requires an additional processing step, though.
            </summary>
        </member>
        <member name="M:CSSParser.Parser.ParseCSS(System.String)">
            <summary>
            This will never return null nor a set containing any null references. It will throw an exception for a null content reference.
            CSS does not support single line comments, unlike LESS CSS. The content parsing is deferred so that the work to parse the content
            is only performed as the returned data is enumerated over. All runs of characters that are of the same CharacterCategorisationOptions
            will be combined into one string (note: this means that runs of opening braces that aren't separated by whitespace will be combined
            into one string containing those multiple braces).
            </summary>
        </member>
        <member name="M:CSSParser.Parser.ParseCSS(System.IO.TextReader)">
            <summary>
            This will never return null nor a set containing any null references. It will throw an exception for a null content reference.
            CSS does not support single line comments, unlike LESS CSS. The content parsing is deferred so that the work to parse the content
            is only performed as the returned data is enumerated over. All runs of characters that are of the same CharacterCategorisationOptions
            will be combined into one string (note: this means that runs of opening braces that aren't separated by whitespace will be combined
            into one string containing those multiple braces).
            </summary>
        </member>
        <member name="M:CSSParser.Parser.ParseCSS(CSSParser.StringNavigators.IWalkThroughStrings)">
            <summary>
            This will never return null nor a set containing any null references. It will throw an exception for a null content reference.
            CSS does not support single line comments, unlike LESS CSS. The content parsing is deferred so that the work to parse the content
            is only performed as the returned data is enumerated over. All runs of characters that are of the same CharacterCategorisationOptions
            will be combined into one string (note: this means that runs of opening braces that aren't separated by whitespace will be combined
            into one string containing those multiple braces).
            </summary>
        </member>
        <member name="M:CSSParser.Parser.ParseLESS(System.String)">
            <summary>
            This will never return null nor a set containing any null references. It will throw an exception for a null content reference.
            LESS CSS supports single line comments as well the multiline comment format supported by standard CSS. The content parsing is
            deferred so that the work to parse the content is only performed as the returned data is enumerated over. All runs of characters
            that are of the same CharacterCategorisationOptions will be combined into one string (note: this means that runs of opening braces
            that aren't separated by whitespace will be combined into one string containing those multiple braces).
            </summary>
        </member>
        <member name="M:CSSParser.Parser.ParseLESS(System.IO.TextReader)">
            <summary>
            This will never return null nor a set containing any null references. It will throw an exception for a null content reference.
            LESS CSS supports single line comments as well the multiline comment format supported by standard CSS. The content parsing is
            deferred so that the work to parse the content is only performed as the returned data is enumerated over. All runs of characters
            that are of the same CharacterCategorisationOptions will be combined into one string (note: this means that runs of opening braces
            that aren't separated by whitespace will be combined into one string containing those multiple braces).
            </summary>
        </member>
        <member name="M:CSSParser.Parser.ParseLESS(CSSParser.StringNavigators.IWalkThroughStrings)">
            <summary>
            This will never return null nor a set containing any null references. It will throw an exception for a null content reference.
            LESS CSS supports single line comments as well the multiline comment format supported by standard CSS. The content parsing is
            deferred so that the work to parse the content is only performed as the returned data is enumerated over. All runs of characters
            that are of the same CharacterCategorisationOptions will be combined into one string (note: this means that runs of opening braces
            that aren't separated by whitespace will be combined into one string containing those multiple braces).
            </summary>
        </member>
        <member name="T:CSSParser.ContentProcessors.StringProcessors.ICollectStringsOfProcessedCharacters">
            <summary>
            This will use IWalkThroughStrings and IProcessCharacters to generate a set of CategorisedCharacterString instances
            </summary>
        </member>
        <member name="M:CSSParser.ContentProcessors.StringProcessors.ICollectStringsOfProcessedCharacters.GetStrings(CSSParser.StringNavigators.IWalkThroughStrings,CSSParser.ContentProcessors.CharacterProcessors.IProcessCharacters)">
            <summary>
            This will never return null nor a set containing any null references. It will throw an exception for null contentWalker or contentProcessor
            references or it the processing failed.
            </summary>
        </member>
        <member name="T:CSSParser.ContentProcessors.CharacterProcessors.MediaQuerySegment">
            <summary>
            Once we're in a media query section, we don't leave it until we hit the open brace of the section it refers to (so don't, for example, allow any colons
            to be identified as StylePropertyColon when they are part of the media query as so should be marked as being a SelectorOrStyleProperty)
            </summary>
        </member>
        <member name="M:CSSParser.ContentProcessors.CharacterProcessors.Factories.CharacterProcessorsFactory.Get``1(System.Object[])">
            <summary>
            This will never return null, it will throw an exception if unable to satisfy the request
            </summary>
        </member>
        <member name="T:CSSParser.ContentProcessors.CharacterProcessors.BracketedSelectorSegment">
            <summary>
            This will likely be an attribute selector (eg. the "[type='text']" of "input[type='text']") or the argument list of a LESS mixin. The
            entire content will be identified as CharacterCategorisationOptions.SelectorOrStyleProperty, such as whitespace, quoted sections (but
            not comments - they will still be identified as acterCategorisationOptions.Comment).
            </summary>
        </member>
        <member name="M:CSSParser.StringNavigators.IWalkThroughStrings_Extensions.DoesCurrentContentMatch(CSSParser.StringNavigators.IWalkThroughStrings,System.String)">
            <summary>
            This is a convenience method signature onto DoesCurrentContentMatch where a null optionalComparer is passed (meaning precise matching is required)
            </summary>
        </member>
        <member name="M:CSSParser.ContentProcessors.CharacterProcessors.Factories.CachingCharacterProcessorsFactory.Get``1(System.Object[])">
            <summary>
            This will never return null, it will throw an exception if unable to satisfy the request
            </summary>
        </member>
        <member name="P:CSSParser.ContentProcessors.CharacterProcessors.Factories.CachingCharacterProcessorsFactory.RequestData.Type">
            <summary>
            This will never be null
            </summary>
        </member>
        <member name="P:CSSParser.ContentProcessors.CharacterProcessors.Factories.CachingCharacterProcessorsFactory.RequestData.Args">
            <summary>
            This will never be null but there is nothing to prevent it from containing any nulls, nor being an empty set
            </summary>
        </member>
        <member name="P:CSSParser.ContentProcessors.CharacterProcessors.CharacterProcessorResult.NextProcessor">
            <summary>
            This will never be null
            </summary>
        </member>
        <member name="M:CSSParser.StringNavigators.GoneTooFarStringNavigator.DoesCurrentContentMatch(System.String,System.Collections.Generic.IEqualityComparer{System.Char})">
            <summary>
            This will return true if the content is at least as long as the specified value string and if the next n characters (where n is the length of
            the value string) correspond to each of the value string's characters. This testing will be done according to the optionalComparer if non-null
            and will apply a simple char comparison (precise) match if a null optionalComparer is specified. An exception will be raised for a null or
            blank value. If there is insufficient content available to match the length of the value argument then false will be returned.
            </summary>
        </member>
        <member name="P:CSSParser.StringNavigators.GoneTooFarStringNavigator.CurrentCharacter">
            <summary>
            This return null if the current location in the string has no content (eg. anywhere on an empty string or past the end of a non-empty string)
            </summary>
        </member>
        <member name="P:CSSParser.StringNavigators.GoneTooFarStringNavigator.Next">
            <summary>
            This return null if the current location in the string has no content (eg. anywhere on an empty string or past the end of a non-empty string)
            </summary>
        </member>
        <member name="T:CSSParser.ContentProcessors.StringProcessors.ProcessedCharactersGrouper">
            <summary>
            This will use IWalkThroughStrings and IProcessCharacters to generate a set of CategorisedCharacterString instances. This implementation will only parse the
            content while the returned set is being enumerated (so if only the start of the content is being examined then the work to parse the rest of the content
            need not be performed). Most runs of characters that are of the same CharacterCategorisationOptions will be combined into one string - the only types
            that will not be combined are CloseBrace, OpenBrace and SemiColon since it seems counter-intuitive when using the parsed content for this to be
            the case (eg. when looking for two closing braces, it makes more sense to expect two individual strings of type CloseBrace than one string
            of type CloseBrace that is two characters long).
            </summary>
        </member>
        <member name="M:CSSParser.ContentProcessors.StringProcessors.ProcessedCharactersGrouper.GetStrings(CSSParser.StringNavigators.IWalkThroughStrings,CSSParser.ContentProcessors.CharacterProcessors.IProcessCharacters)">
            <summary>
            This will never return null nor a set containing any null references. It will throw an exception for null contentWalker or contentProcessor
            references or it the processing failed.
            </summary>
        </member>
        <member name="P:CSSParser.ContentProcessors.CharacterProcessors.ISegment.Content">
            <summary>
            This will never be null
            </summary>
        </member>
    </members>
</doc>
