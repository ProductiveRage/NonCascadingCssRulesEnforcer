<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSSParser</name>
    </assembly>
    <members>
        <member name="T:CSSParser.ContentProcessors.StringProcessors.ICollectStringsOfProcessedCharacters">
            <summary>
            This will use IWalkThroughStrings and IProcessCharacters to generate a set of CategorisedCharacterString instances
            </summary>
        </member>
        <member name="M:CSSParser.ContentProcessors.StringProcessors.ICollectStringsOfProcessedCharacters.GetStrings(CSSParser.StringNavigators.IWalkThroughStrings,CSSParser.ContentProcessors.CharacterProcessors.IProcessCharacters)">
            <summary>
            This will never return null nor a set containing any null references. It will throw an exception for null contentWalker or contentProcessor
            references or it the processing failed.
            </summary>
        </member>
        <member name="M:CSSParser.StringNavigators.IWalkThroughStrings.TryToGetCharacterString(System.Int32)">
            <summary>
            This will try to extract a string of length requiredNumberOfCharacters from the current position in the string navigator. If there are insufficient
            characters available, then a string containing all of the remaining characters will be returned. This will be an empty string if there is no more
            content to deliver. This will never return null.
            </summary>
        </member>
        <member name="P:CSSParser.StringNavigators.IWalkThroughStrings.CurrentCharacter">
            <summary>
            This return null if the current location in the string has no content (eg. anywhere on an empty string or past the end of a non-empty string)
            </summary>
        </member>
        <member name="P:CSSParser.StringNavigators.IWalkThroughStrings.Next">
            <summary>
            This will never return null
            </summary>
        </member>
        <member name="M:CSSParser.ContentProcessors.CharacterProcessors.Factories.IGenerateCharacterProcessors.Get``1(System.Object[])">
            <summary>
            This will never return null, it will throw an exception if unable to satisfy the request
            </summary>
        </member>
        <member name="M:CSSParser.ContentProcessors.CharacterProcessors.Factories.CachingCharacterProcessorsFactory.Get``1(System.Object[])">
            <summary>
            This will never return null, it will throw an exception if unable to satisfy the request
            </summary>
        </member>
        <member name="P:CSSParser.ContentProcessors.CharacterProcessors.Factories.CachingCharacterProcessorsFactory.RequestData.Type">
            <summary>
            This will never be null
            </summary>
        </member>
        <member name="P:CSSParser.ContentProcessors.CharacterProcessors.Factories.CachingCharacterProcessorsFactory.RequestData.Args">
            <summary>
            This will never be null but there is nothing to prevent it from containing any nulls, nor being an empty set
            </summary>
        </member>
        <member name="F:CSSParser.ContentProcessors.CharacterCategorisationOptions.StylePropertyColon">
            <summary>
            This is the colon between a Style Property and Value (not any colons that may exist in a media query, for example)
            </summary>
        </member>
        <member name="M:CSSParser.StringNavigators.GoneTooFarStringNavigator.TryToGetCharacterString(System.Int32)">
            <summary>
            This will try to extract a string of length requiredNumberOfCharacters from the current position in the string navigator. If there are insufficient
            characters available, then a string containing all of the remaining characters will be returned. This will be an empty string if there is no more
            content to deliver. This will never return null.
            </summary>
        </member>
        <member name="P:CSSParser.StringNavigators.GoneTooFarStringNavigator.CurrentCharacter">
            <summary>
            This return null if the current location in the string has no content (eg. anywhere on an empty string or past the end of a non-empty string)
            </summary>
        </member>
        <member name="P:CSSParser.StringNavigators.GoneTooFarStringNavigator.Next">
            <summary>
            This return null if the current location in the string has no content (eg. anywhere on an empty string or past the end of a non-empty string)
            </summary>
        </member>
        <member name="M:CSSParser.ContentProcessors.CharacterProcessors.SelectorOrStyleSegment.IsNextWordOneOfThePseudoClasses(CSSParser.StringNavigators.IWalkThroughStrings)">
            <summary>
            This will try to determine whether the next word from the given point in the string navigator is a recognised pseudo class. Any whitespace at
            the current position will be moved over and the content, if any, taken from there.
            </summary>
        </member>
        <member name="P:CSSParser.ContentProcessors.CharacterProcessors.SelectorOrStyleSegment.CharacterCategorisationBehaviourOverride.CharacterProcessorToReturnTo">
            <summary>
            This will never be null
            </summary>
        </member>
        <member name="P:CSSParser.ContentProcessors.StringProcessors.CategorisedCharacterString.Value">
            <summary>
            This will never be null or an empty string
            </summary>
        </member>
        <member name="P:CSSParser.ContentProcessors.StringProcessors.CategorisedCharacterString.IndexInSource">
            <summary>
            This is the location of the start of the string in the source data
            </summary>
        </member>
        <member name="M:CSSParser.StringNavigators.StringNavigator.TryToGetCharacterString(System.Int32)">
            <summary>
            This will try to extract a string of length requiredNumberOfCharacters from the current position in the string navigator. If there are insufficient
            characters available, then a string containing all of the remaining characters will be returned. This will be an empty string if there is no more
            content to deliver. This will never return null.
            </summary>
        </member>
        <member name="P:CSSParser.StringNavigators.StringNavigator.CSSParser#StringNavigators#IWalkThroughStrings#CurrentCharacter">
            <summary>
            This return null if the current location in the string has no content (eg. anywhere on an empty string or past the end of a non-empty string)
            </summary>
        </member>
        <member name="P:CSSParser.StringNavigators.StringNavigator.Next">
            <summary>
            This return null if the current location in the string has no content (eg. anywhere on an empty string or past the end of a non-empty string)
            </summary>
        </member>
        <member name="T:CSSParser.Parser">
            <summary>
            The parsing performed by these methods is intended to be as cheap as possible but in exchange it performs only simplistic parsing of the
            content (it doesn't differentiate between selectors - eg. "div.Header h2.Name, div.Footer" and style property names - eg. "color" - for
            example). The quality of the data may be improved by passing the returned CategorisedCharacterString set through the
            LessCssHierarchicalParser, this WILL differentiate between selectors and style property names and will represent nested styles (for
            LESS CSS content) and styles nested within media queries. It requires an additional processing step, though.
            </summary>
        </member>
        <member name="M:CSSParser.Parser.ParseCSS(System.String)">
            <summary>
            This will never return null nor a set containing any null references. It will throw an exception for a null content reference.
            CSS does not support single line comment, unlike LESS CSS. The content parsing is deferred so that the work to parse the content
            is only performed as the returned data is enumerated over. All runs of characters that are of the same CharacterCategorisationOptions
            will be combined into one string (note: this means that runs of opening braces that aren't separated by whitespace will be combined
            into one string containing those multiple braces).
            </summary>
        </member>
        <member name="M:CSSParser.Parser.ParseLESS(System.String)">
            <summary>
            This will never return null nor a set containing any null references. It will throw an exception for a null content reference.
            LESS CSS supports single line comments as well the multiline comment format supported by standard CSS. The content parsing is
            deferred so that the work to parse the content is only performed as the returned data is enumerated over. All runs of characters
            that are of the same CharacterCategorisationOptions will be combined into one string (note: this means that runs of opening braces
            that aren't separated by whitespace will be combined into one string containing those multiple braces).
            </summary>
        </member>
        <member name="T:CSSParser.ContentProcessors.CharacterProcessors.MediaQuerySegment">
            <summary>
            Once we're in a media query section, we don't leave it until we hit the open brace of the section it refers to (so don't, for example, allow any colons
            to be identified as StylePropertyColon when they are part of the media query as so should be marked as being a SelectorOrStyleProperty)
            </summary>
        </member>
        <member name="M:CSSParser.ContentProcessors.CharacterProcessors.Factories.CharacterProcessorsFactory.Get``1(System.Object[])">
            <summary>
            This will never return null, it will throw an exception if unable to satisfy the request
            </summary>
        </member>
        <member name="P:CSSParser.ContentProcessors.CharacterProcessors.ISegment.Content">
            <summary>
            This will never be null
            </summary>
        </member>
        <member name="T:CSSParser.ContentProcessors.CharacterProcessors.BracketedSelectorSegment">
            <summary>
            This will likely be an attribute selector (eg. the "[type='text']" of "input[type='text']") or the argument list of a LESS mixin. The
            entire content will be identified as CharacterCategorisationOptions.SelectorOrStyleProperty, such as whitespace, quoted sections (but
            not comments - they will still be identified as acterCategorisationOptions.Comment).
            </summary>
        </member>
        <member name="T:CSSParser.ContentProcessors.StringProcessors.ProcessedCharactersGrouper">
            <summary>
            This will use IWalkThroughStrings and IProcessCharacters to generate a set of CategorisedCharacterString instances. This implementation will only parse the
            content while the returned set is being enumerated (so if only the start of the content is being examined then the work to parse the rest of the content
            need not be performed). Most runs of characters that are of the same CharacterCategorisationOptions will be combined into one string - the only types
            that will not be combined are CloseBrace, OpenBrace and SemiColon since it seems counter-intuitive when using the parsed content for this to be
            the case (eg. when looking for two closing braces, it makes more sense to expect two individual strings of type CloseBrace than one string
            of type CloseBrace that is two characters long).
            </summary>
        </member>
        <member name="M:CSSParser.ContentProcessors.StringProcessors.ProcessedCharactersGrouper.GetStrings(CSSParser.StringNavigators.IWalkThroughStrings,CSSParser.ContentProcessors.CharacterProcessors.IProcessCharacters)">
            <summary>
            This will never return null nor a set containing any null references. It will throw an exception for null contentWalker or contentProcessor
            references or it the processing failed.
            </summary>
        </member>
        <member name="P:CSSParser.ContentProcessors.CharacterProcessors.CharacterProcessorResult.NextProcessor">
            <summary>
            This will never be null
            </summary>
        </member>
        <member name="T:CSSParser.ContentProcessors.CharacterProcessors.QuotedSegment">
            <summary>
            This may be a quoted section of a property value or of an attribute selector (this will be determined by the characterCategorisation
            passed to the constructor)
            </summary>
        </member>
    </members>
</doc>
